Monday

Create your MVC groups X
Create your Tweet class with an initializer that takes a Dictionary in as a parameter X
In addition to the text property, add a property to hold the username of the person who tweeted the tweet X
Drag the tweet.json file into your Xcode project X
Parse the json file into tweet objects X
In addition to text, pull out the username from the json for each tweet and use that property you added to hold it X
Display those tweet objects in the table view X
Create a custom table view cell class with your own custom label and image view X


Tuesday

Use the Accounts framework to access the user's twitter account on their iOS device X
Use the Social framework to make a request to twitter for the users home timeline X
Use a ranged switch statement to make sure the status code of the response is good X
Reload the table view on the main thread once you are done parsing the JSON data from the response X


Wednesday

Setup your cells with autolayout so you can see the entire tweets text. If you get any .... at
the end that is probably twitters API being stupid. X
Move all of your network code into a network controller, and create a method to fetch the users timeline with a completion handler.X
Create a 2nd view controller that fetches more specific information on the tweet that the user presses on.
The API URL for that is "https://api.twitter.com/1.1/statuses/show.json?id=\(id)" where id is the id of the tweet that was pressed on.
You should create a 2nd method in your network controller that fetches more info for the tweet
that was selected, using this URL in the SLRequest.
Upon clicking a tweet, your interface should pop to the 2nd view controller and display the tweet
selected and additional info that was retrieved by the 2nd network call.

Thursday

Get caught up with Mon-Wed homework
In your single tweet view controller, upon clicking on the person's image (hint: change the image view to a button, buttons can have images) the app should push a 3rd view controller onto the stack
This 3rd view controller will show that user's timeline (the api url is "https://api.twitter.com/1.1/statuses/user_timeline.json?username (Links to an external site.)=\(username)"
Use a table view header view to mimic Twitter's layout of that screen (show their profile background image, their picture, their name, their location)
Convert your table view cells to use a Nib, so you can share the same cell for both the home time line VC and the user Timeline VC
Have your cells be a dynamic height based on how much text each tweet is
Implement a stack data structure in a separate playground